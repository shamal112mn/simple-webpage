
properties([
  parameters ([
    choice(choices: ['Deploy', 'Destroy'], description: 'Select action', name: 'action'),
    string(defaultValue: '', description: 'Specify TAG#', name: 'TAG', trim: true)
  ])
])

int imageTag = Integer.parseInt(params.TAG)

def application = """
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mynginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: shamal317mn/mynginx:${imageTag}
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata: 
  labels:
    app: nginx
  name: mynginx
  namespace: default   
spec:  
  ports:
  - nodePort: 30080
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
"""


node {
  if ( params.action == "Deploy"){
    stage('Git clone') {
      cleanWs()
      git 'https://github.com/shamal112mn/simple-webpage.git'
      writeFile file: "mynginx.yaml", text: "${application}"
    }

    sshagent(credentials: ['master_jenkins_ssh']){    
      stage('Move  appl'){      
        sh 'scp mynginx.yaml  vagrant@100.0.0.13:mynginx.yaml'
      }
              
      stage("${params.action} to cluster"){       
          sh 'ssh  vagrant@100.0.0.13  kubectl apply -f mynginx.yaml'
      }      
    } 
  } 
  else if ( params.action == "Destroy"){
    stage("${params.action} to cluster"){ 
      sh 'ssh  vagrant@100.0.0.13  kubectl delete -f mynginx.yaml'
    }
  }  
}

   





